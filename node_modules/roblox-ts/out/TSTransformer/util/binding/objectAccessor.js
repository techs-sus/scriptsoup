"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.objectAccessor = void 0;
const LuauAST_1 = __importDefault(require("../../../LuauAST"));
const diagnostics_1 = require("../../../Shared/diagnostics");
const assert_1 = require("../../../Shared/util/assert");
const DiagnosticService_1 = require("../../classes/DiagnosticService");
const transformExpression_1 = require("../../nodes/expressions/transformExpression");
const addOneIfArrayType_1 = require("../addOneIfArrayType");
const types_1 = require("../types");
const typescript_1 = __importDefault(require("typescript"));
const objectAccessor = (state, parentId, accessType, name) => {
    const symbol = (0, types_1.getFirstDefinedSymbol)(state, state.getType(name));
    if (symbol && state.services.macroManager.getPropertyCallMacro(symbol)) {
        DiagnosticService_1.DiagnosticService.addDiagnostic(diagnostics_1.errors.noIndexWithoutCall(name.parent));
    }
    if (typescript_1.default.isIdentifier(name)) {
        return LuauAST_1.default.property(parentId, name.text);
    }
    else if (typescript_1.default.isComputedPropertyName(name)) {
        return LuauAST_1.default.create(LuauAST_1.default.SyntaxKind.ComputedIndexExpression, {
            expression: parentId,
            index: (0, addOneIfArrayType_1.addOneIfArrayType)(state, accessType, (0, transformExpression_1.transformExpression)(state, name.expression)),
        });
    }
    else if (typescript_1.default.isNumericLiteral(name) || typescript_1.default.isStringLiteral(name)) {
        return LuauAST_1.default.create(LuauAST_1.default.SyntaxKind.ComputedIndexExpression, {
            expression: parentId,
            index: (0, transformExpression_1.transformExpression)(state, name),
        });
    }
    else if (typescript_1.default.isPrivateIdentifier(name)) {
        DiagnosticService_1.DiagnosticService.addDiagnostic(diagnostics_1.errors.noPrivateIdentifier(name));
        return LuauAST_1.default.nil();
    }
    (0, assert_1.assert)(false);
};
exports.objectAccessor = objectAccessor;
//# sourceMappingURL=objectAccessor.js.map