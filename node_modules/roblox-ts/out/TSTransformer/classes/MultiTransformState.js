"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MultiTransformState = void 0;
const diagnostics_1 = require("../../Shared/diagnostics");
const DiagnosticService_1 = require("./DiagnosticService");
class MultiTransformState {
    constructor() {
        this.isMethodCache = new Map();
        this.isDefinedAsLetCache = new Map();
        this.isReportedByNoAnyCache = new Set();
        this.getModuleExportsCache = new Map();
        this.getModuleExportsAliasMapCache = new Map();
        this.hasCheckedJsxFactory = false;
        this.hasCheckedJsxFragmentFactory = false;
    }
    checkJsxFactory(node, compilerOptions) {
        this.hasCheckedJsxFactory = true;
        if (!this.hasCheckedJsxFactory && compilerOptions.jsxFactory !== "Roact.createElement") {
            DiagnosticService_1.DiagnosticService.addDiagnostic(diagnostics_1.errors.invalidJsxFactory(node));
        }
    }
    checkJsxFragmentFactory(node, compilerOptions) {
        this.hasCheckedJsxFragmentFactory = true;
        if (!this.hasCheckedJsxFragmentFactory && compilerOptions.jsxFragmentFactory !== "Roact.createFragment") {
            DiagnosticService_1.DiagnosticService.addDiagnostic(diagnostics_1.errors.invalidJsxFragmentFactory(node));
        }
    }
}
exports.MultiTransformState = MultiTransformState;
//# sourceMappingURL=MultiTransformState.js.map