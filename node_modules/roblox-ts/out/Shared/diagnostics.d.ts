import ts from "typescript";
export declare type DiagnosticFactory<T = void> = {
    (node: ts.Node, context: T): ts.DiagnosticWithLocation;
    id: number;
};
export declare function getDiagnosticId(diagnostic: ts.Diagnostic): number;
export declare const errors: {
    noInvalidIdentifier: DiagnosticFactory<void>;
    noReservedIdentifier: DiagnosticFactory<void>;
    noReservedClassFields: DiagnosticFactory<void>;
    noClassMetamethods: DiagnosticFactory<void>;
    noForInStatement: DiagnosticFactory<void>;
    noLabeledStatement: DiagnosticFactory<void>;
    noDebuggerStatement: DiagnosticFactory<void>;
    noNullLiteral: DiagnosticFactory<void>;
    noPrivateIdentifier: DiagnosticFactory<void>;
    noTypeOfExpression: DiagnosticFactory<void>;
    noRegex: DiagnosticFactory<void>;
    noBigInt: DiagnosticFactory<void>;
    noAny: DiagnosticFactory<void>;
    noVar: DiagnosticFactory<void>;
    noGetterSetter: DiagnosticFactory<void>;
    noEqualsEquals: DiagnosticFactory<void>;
    noExclamationEquals: DiagnosticFactory<void>;
    noComma: DiagnosticFactory<void>;
    noEnumMerging: DiagnosticFactory<void>;
    noNamespaceMerging: DiagnosticFactory<void>;
    noSpreadDestructuring: DiagnosticFactory<void>;
    noFunctionExpressionName: DiagnosticFactory<void>;
    noPrecedingSpreadElement: DiagnosticFactory<void>;
    noDestructureAssignmentExpression: DiagnosticFactory<void>;
    noExportAssignmentLet: DiagnosticFactory<void>;
    noGlobalThis: DiagnosticFactory<void>;
    noArguments: DiagnosticFactory<void>;
    noPrototype: DiagnosticFactory<void>;
    noSuperProperty: DiagnosticFactory<void>;
    noNonNumberStringRelationOperator: DiagnosticFactory<void>;
    noInstanceMethodCollisions: DiagnosticFactory<void>;
    noStaticMethodCollisions: DiagnosticFactory<void>;
    noUnaryPlus: DiagnosticFactory<void>;
    noNonNumberUnaryMinus: DiagnosticFactory<void>;
    noAwaitForOf: DiagnosticFactory<void>;
    noAsyncGeneratorFunctions: DiagnosticFactory<void>;
    noNonStringModuleSpecifier: DiagnosticFactory<void>;
    noIterableIteration: DiagnosticFactory<void>;
    noLuaTupleInTemplateExpression: DiagnosticFactory<void>;
    noMixedTypeCall: DiagnosticFactory<void>;
    noIndexWithoutCall: DiagnosticFactory<void>;
    noOptionalMacroCall: DiagnosticFactory<void>;
    noConstructorMacroWithoutNew: DiagnosticFactory<void>;
    noMacroExtends: DiagnosticFactory<void>;
    noMacroUnion: DiagnosticFactory<void>;
    noMacroObjectSpread: DiagnosticFactory<void>;
    noVarArgsMacroSpread: DiagnosticFactory<void>;
    noNonModule: DiagnosticFactory<void>;
    noModuleSpecifierFile: DiagnosticFactory<void>;
    noInvalidModule: DiagnosticFactory<void>;
    noUnscopedModule: DiagnosticFactory<void>;
    noNonModuleImport: DiagnosticFactory<void>;
    noIsolatedImport: DiagnosticFactory<void>;
    invalidJsxFactory: DiagnosticFactory<void>;
    invalidJsxFragmentFactory: DiagnosticFactory<void>;
    noRoactInheritance: DiagnosticFactory<void>;
    noSuperPropertyCallRoactComponent: DiagnosticFactory<void>;
    missingSuperConstructorRoactComponent: DiagnosticFactory<void>;
    noJsxText: DiagnosticFactory<void>;
    expectedMethodGotFunction: DiagnosticFactory<void>;
    expectedFunctionGotMethod: DiagnosticFactory<void>;
    noRojoData: DiagnosticFactory<string>;
    incorrectFileName: (originalFileName: string, suggestedFileName: string, fullPath: string) => ts.Diagnostic;
    rojoPathInSrc: (partitionPath: string, suggestedPath: string) => ts.Diagnostic;
};
export declare const warnings: {
    truthyChange: (checksStr: string) => DiagnosticFactory<void>;
    stringOffsetChange: (text: string) => DiagnosticFactory<void>;
    transformerNotFound: (name: string, err: unknown) => ts.Diagnostic;
    runtimeLibUsedInReplicatedFirst: DiagnosticFactory<void>;
};
